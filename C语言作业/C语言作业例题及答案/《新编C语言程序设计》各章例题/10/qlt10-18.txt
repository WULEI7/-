#include <stdio.h>
typedef struct node { int data; struct node *next; } NODE; /*定义结点类型NODE */
/*正向建立链表*/
NODE *create_f()
{  char ch='a';
   NODE *p,*h=NULL,*q=NULL;
   while(ch<='z') {
      p=(NODE *)malloc(sizeof(NODE)); /*强制类型转换为指针*/ 
      p->data=ch;
      if(h==NULL) h=p;
      else q->next=p; 
      ch++; q=p; 
   }
   q->next=NULL; /*链表结束*/
   return h;
}
/*逆向建立*/
NODE *create_b()
{  char ch='a';
   NODE *p,*h=NULL;
   while(ch<='z') {
      p=(NODE *)malloc(sizeof(NODE));
      p->data=ch;
      p->next=h;/*不断地把head往前挪*/
      h=p; ch++;
   }
   return h;
}
/*用递归实现链表正序输出*/
void output_f(NODE *h)
{  if(h!=NULL)
   {  printf("%c ",h->data);
      output_f(h->next);
   }
}
void output_b(NODE *h) /*用递归实现链表逆序输出*/
{  if(h!=NULL)
   {  output_b(h->next);
      printf("%c ",h->data);
   }
}
NODE *insert(NODE *h,int x) /*插入结点（已有升序的链表）*/
{  NODE *new,*front,*current=h;
   while(current!=NULL&&(current->data<x)) /*查找插入的位置*/
   {  front=current;
      current=current->next;
   }
   new=(NODE *)malloc(sizeof(NODE));
   new->data=x; new->next=current;
   if(current==h)  /*判断是否是要插在表头*/ 
      h=new;
   else front->next=new;
   return h;
}
NODE *delete(NODE *h,int x)  /*删除结点*/
{  NODE *q,*p=h; 
   while(p!=NULL&&(p->data!=x)){ q=p; p=p->next; }
     if(p->data==x)         /*找到了要删的结点*/
     {  if(p==h) h=h->next; /*判断是否要删表头*/ 
        else q->next=p->next;
        free(p);            /*释放掉已删掉的结点*/
     }
   return h;
}
设计一个综合调用以上函数的main主函数，见如下：
main()
{  NODE *p1,*p2;  char ch='z';
   p1=create_f();               /*正向建立链表*/
   output_f(p1); printf("\n");  /*用递归实现链表正序输出*/
   output_b(p1); printf("\n");  /*用递归实现链表逆序输出*/
   p2=create_b();               /*逆向建立链表*/
   output_f(p2); printf("\n");  /*用递归实现链表正序输出*/
   output_b(p2); printf("\n");  /*用递归实现链表逆序输出*/
   p1=insert(p1,65);            /* 插入字母A到链表 */
   p1=insert(p1,66);            /* 插入字母B到链表 */
   output_f(p1); printf("\n");  /*用递归实现链表正序输出*/
   p1=delete(p1,66);            /*从链表中删除字母B */
   output_f(p1); printf("\n");  /*用递归实现链表正序输出*/
   p1=delete(p1,65);            /*从链表中删除字母A */
   output_f(p1); printf("\n");  /*用递归实现链表正序输出*/
   while(ch>='a') {             /*循环删除并释放所有结点*/
      p1=delete(p1,ch);         /*从链表中删除字母ch */
      output_f(p1);printf("\n");/*用递归实现链表正序输出*/
      ch--; 
   }
}
